@page "/Server/{Id:int:min(0)}/Settings/Security"
@using Microsoft.EntityFrameworkCore
@using QSM.Core.ServerSettings
@using QSM.Web.Data

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation

<h3>Server Security</h3>

<EditForm Model="Input" FormName="SecurityOptions" OnValidSubmit="SaveChanges">
    <DataAnnotationsValidator/>
    <ValidationSummary class="text-danger" role="alert"/>
    <div class="row">
        <div class="col-md-6">
            <div class="form-check mb-2">
                <InputCheckbox @bind-Value="Input.OnlineMode" id="Input.OnlineMode" class="form-check-input" aria-required="true"/>
                <label for="Input.OnlineMode" class="form-check-label">Online Mode</label>
            </div>
            <div class="form-check mb-2">
                <InputCheckbox @bind-Value="Input.PreventProxyConnections" id="Input.PreventProxyConnections" class="form-check-input" aria-required="true"/>
                <label for="Input.PreventProxyConnections" class="form-check-label">Prevent Proxy Connections</label>
            </div>
            <div class="form-check mb-2">
                <InputCheckbox @bind-Value="Input.EnableCommandBlocks" id="Input.EnableCommandBlocks" class="form-check-input" aria-required="true"/>
                <label for="Input.EnableCommandBlocks" class="form-check-label">Enable Command Blocks</label>
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm] private SecurityOptions Input { get; set; } = new();
    
    private ServerInstance _server = new();
    private ServerProperties _properties = null!;
    
    protected override void OnInitialized()
    {
        using var ctx = DbFactory.CreateDbContext();
        var server = ctx.Servers.Find(Id);

        if (server == null)
        {
            Navigation.NavigateTo("/");
            return;
        }

        _server = server;
        _properties = new ServerProperties(_server.PropertiesPath);
        _properties.Load();
    }

    private void SaveChanges()
    {
        Input.Apply(_properties);
        _properties.Save();
    }

    class SecurityOptions : PropertyModificationModel
    {
        [ServerProperty("online-mode")]
        public bool OnlineMode { get; set; } = true;
        
        [ServerProperty("prevent-proxy-connections")]
        public bool PreventProxyConnections { get; set; }
        
        [ServerProperty("enable-command-block")]
        public bool EnableCommandBlocks { get; set; }
    }

}