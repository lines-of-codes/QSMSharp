@page "/Account/Register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using QSM.Web.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject RoleManager<IdentityRole> RoleManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager

<PageTitle>Onboarding - QSM Web Console</PageTitle>

<h1>Onboarding</h1>

<div class="row">
    <div class="col-lg-6">
        <StatusMessage Message="@Message"/>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser"
                  FormName="register">
            <DataAnnotationsValidator/>
            <h2>Create a new account.</h2>
            <hr/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-2">
                <InputText @bind-Value="Input.Username" id="Input.Username" class="form-control" autocomplete="username"
                           aria-required="true" placeholder="JohnDoe"/>
                <label for="Input.Username">Username</label>
                <ValidationMessage For="() => Input.Username" class="text-danger"/>
            </div>
            <div class="form-floating mb-2">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control"
                           autocomplete="new-password" aria-required="true" placeholder=""/>
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword"
                           class="form-control" autocomplete="new-password" aria-required="true" placeholder=""/>
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section class="mt-1">
            <h3>Welcome!</h3>
            <hr/>
            <p>
                Welcome to the QSM web console. The onboarding process will
                allow you to create the owner account to manage the instance.
            </p>
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        var userCount = UserManager.Users.Count();

        if (userCount > 0)
        {
            NavigationManager.NavigateTo("Account/Login");
        }

        base.OnInitialized();
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }

        await CreateRolesAsync();
        await UserManager.AddToRoleAsync(user, "Owner");
        Logger.LogInformation("User created a new account with password.");

        await SignInManager.SignInAsync(user, false);
        RedirectManager.RedirectTo(ReturnUrl);
    }
    
    private async Task CreateRolesAsync()
    {
        string[] roleNames = ["Owner", "Manager"];

        foreach (var roleName in roleNames)
        {
            var roleExists  = await RoleManager.RoleExistsAsync(roleName);
            if (!roleExists)
            {
                await RoleManager.CreateAsync(new IdentityRole(roleName));
            }
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}